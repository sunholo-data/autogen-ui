substitutions:
  _SERVICE_NAME: autogen
  _BUILD_FOLDER: application/qna/vertex-genai
  _IMAGE_NAME: terraform_managed
  _REGION: terraform_managed
  _ARTIFACT_REGISTRY_REPO_URL: terraform_managed
  _GCS_BUCKET: terraform_managed
  _CONFIG_FOLDER: terraform_managed
  _CONFIG_BUCKET: terraform_managed
  _PROJECT_ID: terraform_managed
  _LANCEDB_BUCKET: terraform_managed
  _ALLOYDB_DB: terraform_managed
  _AUTOGEN_URL: terraform_managed

tags: ['${_PROJECT_ID}', '${_SERVICE_NAME}']

options:
  logging: GCS_ONLY
logsBucket: gs://multivac-deploy-logging-bucket

steps:
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    dir: ${_BUILD_FOLDER}
    args:
    - '-c'
    - |
      cat <<EOF >Dockerfile_cloudrun
      # Use an official Python runtime as a parent image
      FROM python:3.9-slim

      WORKDIR /app/

      # Set environment variables
      ENV NEXT_PUBLIC_API_SERVER=${_AUTOGEN_URL}/api

      # Install git and other dependencies
      RUN apt-get update && apt-get install -y \
          curl \
          && rm -rf /var/lib/apt/lists/*

      # Install Python dependencies
      RUN pip install -e .

      # Change the working directory to autogenui
      WORKDIR /app/autogen-ui

      # Install Node.js and yarn
      RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - \
          && apt-get install -y nodejs \
          && npm install --global yarn

      # Change the working directory to the frontend
      WORKDIR /app/autogen-ui/frontend

      # Install frontend dependencies
      RUN yarn install

      # Build the frontend
      RUN yarn build

      # Expose the port the app runs on
      EXPOSE 8080

      # Set the working directory back to the root of the application
      WORKDIR /app/autogen-ui

      # Run the UI server
      CMD ["autogenui", "--port", "8080"]
      EOF

  - name: 'gcr.io/cloud-builders/docker'
    dir: ${_BUILD_FOLDER}
    args: ['build', '-t', '${_ARTIFACT_REGISTRY_REPO_URL}/${_IMAGE_NAME}/${_SERVICE_NAME}:${BRANCH_NAME}', '-f', 'Dockerfile_cloudrun', '.', '--network=cloudbuild']

  - name: 'gcr.io/cloud-builders/docker'
    dir: ${_BUILD_FOLDER}
    args: ['push', '${_ARTIFACT_REGISTRY_REPO_URL}/${_IMAGE_NAME}/${_SERVICE_NAME}:${BRANCH_NAME}']

  # Deploy the image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy cloud run
    entrypoint: bash
    dir: ${_BUILD_FOLDER}
    args:
      - "-c"
      - |
        gcloud beta run deploy ${_SERVICE_NAME} --image ${_ARTIFACT_REGISTRY_REPO_URL}/${_IMAGE_NAME}/${_SERVICE_NAME}:${BRANCH_NAME} \
           --region ${_REGION} \
           --project ${_PROJECT_ID} \
           --platform managed \
           --allow-unauthenticated \
           --memory 2Gi \
           --cpu 1 \
           --max-instances 3 \
           --update-secrets=OPENAI_API_KEY=OPENAI_API_KEY:latest \
           --update-secrets=LANGFUSE_HOST=LANGFUSE_URL:latest \
           --update-secrets=LANGFUSE_SECRET_KEY=LANGFUSE_API_KEY:latest \
           --update-secrets=LANGFUSE_PUBLIC_KEY=LANGFUSE_PUBLIC_KEY:latest \
           --session-affinity \
           --add-volume name=gcs_config,type=cloud-storage,bucket=${_CONFIG_BUCKET},readonly=true \
           --add-volume-mount volume=gcs_config,mount-path=/gcs_config
